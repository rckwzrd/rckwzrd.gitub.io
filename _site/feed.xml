<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-04-15T18:33:35-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Rckwzrd’s Reference</title><subtitle>Matt Rhoads |</subtitle><entry><title type="html">Kickstart Nvim</title><link href="http://localhost:4000/2023/08/05/kickstart-nvim.html" rel="alternate" type="text/html" title="Kickstart Nvim" /><published>2023-08-05T00:00:00-05:00</published><updated>2023-08-05T00:00:00-05:00</updated><id>http://localhost:4000/2023/08/05/kickstart-nvim</id><content type="html" xml:base="http://localhost:4000/2023/08/05/kickstart-nvim.html"><![CDATA[<h1 id="need-notes-and-commands">Need notes and commands</h1>]]></content><author><name></name></author><summary type="html"><![CDATA[Need notes and commands]]></summary></entry><entry><title type="html">Iam Vs S3 Bucket Policy</title><link href="http://localhost:4000/2023/07/15/iam-vs-s3-bucket-policy.html" rel="alternate" type="text/html" title="Iam Vs S3 Bucket Policy" /><published>2023-07-15T00:00:00-05:00</published><updated>2023-07-15T00:00:00-05:00</updated><id>http://localhost:4000/2023/07/15/iam-vs-s3-bucket-policy</id><content type="html" xml:base="http://localhost:4000/2023/07/15/iam-vs-s3-bucket-policy.html"><![CDATA[<p>IAM and S3 bucket policies offer tools for controlling actions against S3 buckets and objects stored within. In practice both methods function similiarly but differ in the way they are attached to users and resources. Below are general notes on IAM and S3 bucket policies.</p>

<p><a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/Welcome.html">S3 bucket policy documentaion</a></p>

<p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html">IAM documentation</a></p>

<p><a href="https://www.youtube.com/watch?v=gWAwqY76JQs">Short youtube video comparing S3 and IAM policies</a></p>

<p>IAM recap</p>
<ul>
  <li>identity and access management</li>
  <li>define polices on resources
    <ul>
      <li>statement, effect, action, and resource</li>
      <li>actions allowed/denied</li>
      <li>json</li>
    </ul>
  </li>
  <li>resources are entities</li>
  <li>policies used to define access to resources</li>
  <li>policies are attached to
    <ul>
      <li>users, roles, and groups</li>
    </ul>
  </li>
  <li>implicit and explicit deny</li>
  <li>deny beats allow</li>
</ul>

<p>S3 bucket policies</p>
<ul>
  <li>policies attached to s3 buckets
    <ul>
      <li>similiar to IAM policy</li>
      <li>principal key</li>
      <li>json</li>
    </ul>
  </li>
  <li>policy permissions applied to a principal
    <ul>
      <li>person or application</li>
    </ul>
  </li>
  <li>policy is attached to bucket
    <ul>
      <li>opposed to IAM which is attached to user, role, or group</li>
    </ul>
  </li>
</ul>

<p>Good to know</p>
<ul>
  <li>IAM and resource policies can be used to together
    <ul>
      <li>IAM for global permissions</li>
      <li>resources policy for specific permissions</li>
      <li>specific resource will trump global IAM</li>
    </ul>
  </li>
  <li>s3 bucket policies are useful for cross account access management
    <ul>
      <li>larger policy size to support cross account management</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[IAM and S3 bucket policies offer tools for controlling actions against S3 buckets and objects stored within. In practice both methods function similiarly but differ in the way they are attached to users and resources. Below are general notes on IAM and S3 bucket policies.]]></summary></entry><entry><title type="html">S3 Core Concepts</title><link href="http://localhost:4000/2023/06/18/s3-core-concepts.html" rel="alternate" type="text/html" title="S3 Core Concepts" /><published>2023-06-18T00:00:00-05:00</published><updated>2023-06-18T00:00:00-05:00</updated><id>http://localhost:4000/2023/06/18/s3-core-concepts</id><content type="html" xml:base="http://localhost:4000/2023/06/18/s3-core-concepts.html"><![CDATA[<p>Simple storage service (S3) was the first AWS service launched in 2006. S3 focuses on general object storage in “the cloud”. General objects include files, source code, media, and data. S3 is generally cheap, highly available, highly durable, and it integrates with many AWS services. S3 is useful for website hosting, database backups, data processing, and storing software artifacts. Notes below cover S3 core concepts.</p>

<p><a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/Welcome.html">S3 AWS documentation</a></p>

<p><a href="https://youtu.be/tfU0JEZjcsg?si=UwQK91ctuBVz-EYU">Short video on S3 basics</a></p>

<p>Core concepts</p>
<ul>
  <li>objects in buckets with globally unique names</li>
  <li>buckets have a 5TB maximum size</li>
  <li>bucket is a general purpose file system with flexible organization</li>
  <li>objects are stored in buckets in the file system</li>
  <li>create bucket and structure, put objects in bucket, retrieve objects from bucket</li>
  <li>retrieve objects via http url, only public bucket, private by default</li>
  <li>retrieve object via boto3 s3client.get_object()</li>
  <li>retrieve object via aws console</li>
  <li>control bucket access and operations with bucket policy or IAM policy</li>
</ul>

<p>Storage classes</p>
<ul>
  <li>buckets and objects can have different storage classes</li>
  <li>storage classes have decreased cost but decreased performance</li>
  <li>standard, intelligent, infrequent access, glacier</li>
  <li>different pricing, latency, and availability</li>
  <li>hot data, infrequent access, and cold data cycle through storage classes</li>
  <li>life cycle rules automate storage tier cycling</li>
</ul>

<p>Security</p>
<ul>
  <li>misconfigured S3 Bukets can easily leak data</li>
  <li>public access is blocked by default</li>
  <li>objects are encrypted in transit and at rest, has to be configured</li>
  <li>access and resource controls with AWS IAM</li>
  <li>logging and alarms integrate with cloudwatch, has to be configured</li>
  <li>assume AWS cloud infrastructure security</li>
</ul>

<p>S3 in action</p>
<ul>
  <li>data ingestion pipeline
    <ul>
      <li>API based stock data stream</li>
      <li>kinesis firehouse batching of independent events</li>
      <li>deliver batches to s3</li>
      <li>batch event triggers lambda</li>
      <li>batch object is used by lambda</li>
    </ul>
  </li>
  <li>S3 events for object creation, deletion, modification
    <ul>
      <li>trigger event to invoke lambda, pass bucket name and object key</li>
      <li>pull object, do operation, return object to bucket, or do something else</li>
    </ul>
  </li>
  <li>s3 and lambda is a useful combination</li>
  <li>analytics and dashboarding
    <ul>
      <li>athena analytics service on bucket contents</li>
      <li>bucket objects have to follow a scheme</li>
      <li>pay per use, no database provisioning</li>
      <li>athena, s3, quicksight</li>
    </ul>
  </li>
  <li>event driven architectures
    <ul>
      <li>image uploading pipeline</li>
      <li>customer, s3, lambda, appsync</li>
      <li>s3 to lambda put notification, run process on lambda</li>
      <li>notify customer download is ready with pub/sub model</li>
    </ul>
  </li>
</ul>

<p>Pricing</p>
<ul>
  <li>dependent on storage classes</li>
  <li>three main factors
    <ul>
      <li>stored object size and number</li>
      <li>accessing objects over network with GET and POST</li>
      <li>transferring objects between buckets and services</li>
    </ul>
  </li>
  <li>100gb storage, 10K PUT, 10 Read
    <ul>
      <li>standard 6.76 / month</li>
      <li>infrequent access 6.27 / month</li>
      <li>glacier 6.64 / month</li>
    </ul>
  </li>
  <li>free tier
    <ul>
      <li>5gb, 20k get, 2K put</li>
      <li>12 month max</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[Simple storage service (S3) was the first AWS service launched in 2006. S3 focuses on general object storage in “the cloud”. General objects include files, source code, media, and data. S3 is generally cheap, highly available, highly durable, and it integrates with many AWS services. S3 is useful for website hosting, database backups, data processing, and storing software artifacts. Notes below cover S3 core concepts.]]></summary></entry><entry><title type="html">Iam Core Concepts</title><link href="http://localhost:4000/2023/05/11/iam-core-concepts.html" rel="alternate" type="text/html" title="Iam Core Concepts" /><published>2023-05-11T00:00:00-05:00</published><updated>2023-05-11T00:00:00-05:00</updated><id>http://localhost:4000/2023/05/11/iam-core-concepts</id><content type="html" xml:base="http://localhost:4000/2023/05/11/iam-core-concepts.html"><![CDATA[<p>Identity Access Management is a policy tool used to control access to resources created in AWS. Resources include s3 buckets, lambdas, databases, containers, and other services. Human and application users need allow and deny permissions to perform actions on resources. Permissions are defined in an IAM policy document and attached to a user, group, or role. Notes below cover IAM basics.</p>

<p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html">AWS IAM documentation</a></p>

<p><a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html">AWS IAM policy simulator</a></p>

<p><a href="https://youtu.be/_ZCTvmaPgao?si=vwc63x_fXAPhC_Pl">Short video on IAM basics</a></p>

<p>Create lambda function example</p>
<ul>
  <li>user creates lambda with lambda::createFunction</li>
  <li>access denied error if user does not have permission</li>
  <li>craft a json policy document and attach to user
    <ul>
      <li>statement array with effect, action, and resource keys</li>
    </ul>
  </li>
  <li>effect key: explicit and implicit allow/deny</li>
  <li>resource can include everything or specific resources</li>
  <li>actions on resource are resolved against policy documents attached to user</li>
  <li>execute actions from console, CLI or SDK</li>
</ul>

<p>Access keys and secret access keys</p>
<ul>
  <li>secret codes used to interact with aws</li>
  <li>use to configure aws cli and saml2aws</li>
  <li>use to initiate boto3 client</li>
  <li>keys are needed to affiliate policy documents with a user</li>
</ul>

<p>Policy document</p>
<ul>
  <li>dynamoDB read only access to specific columns</li>
  <li>asterisk is a wild card</li>
  <li>action key with array of common read only operations</li>
  <li>resource key with table suffix</li>
  <li>condition key with constraint operators and keys to limit scope</li>
</ul>

<p>Other concepts</p>
<ul>
  <li>groups for account and organization owners
    <ul>
      <li>bucket users into admin, developer, and testers</li>
      <li>apply general or blanket policies</li>
    </ul>
  </li>
  <li>roles vs users
    <ul>
      <li>roles are interchangeable with users</li>
      <li>roles also have policy documents</li>
      <li>roles can be assumed for a temporary time period</li>
      <li>users and applications can have ability to assume a role</li>
    </ul>
  </li>
  <li>trust relationships
    <ul>
      <li>use of roles for users to assume access to resources between accounts</li>
    </ul>
  </li>
</ul>

<p>Pro tips</p>
<ul>
  <li>protect root at all costs</li>
  <li>explicit effect deny beats effect allow
    <ul>
      <li>deny supersedes allow at all levels</li>
    </ul>
  </li>
  <li>use least privilege model
    <ul>
      <li>specify least resource and action needed to do a thing</li>
      <li>minimize wild cards</li>
    </ul>
  </li>
  <li>use aws policy simulator
    <ul>
      <li>policy builder and tester</li>
    </ul>
  </li>
</ul>

<p>Summary</p>
<ul>
  <li>create users who use credentials that grant access based on their policy document</li>
  <li>create roles which can be assumed by entities within or across accounts with a trust relationship</li>
</ul>

<p>Make dynamoDB IAM policy</p>
<ul>
  <li>IAM console access management
    <ul>
      <li>groups, users, roles, and policies</li>
    </ul>
  </li>
  <li>resource group add user</li>
  <li>dynamoDB user with access key and ID</li>
  <li>policy contains
    <ul>
      <li>service, action, resources, conditions</li>
    </ul>
  </li>
  <li>associate policy with user
    <ul>
      <li>attach policy to add permissions</li>
    </ul>
  </li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
	</span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2012-10-17"</span><span class="p">,</span><span class="w">
	</span><span class="nl">"Statement"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
		</span><span class="p">{</span><span class="w">
			</span><span class="nl">"Sid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"DynamoReadWriteTransactionsTable"</span><span class="err">.</span><span class="w">
			</span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
			</span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
				</span><span class="s2">"dynamodb:PutItem"</span><span class="p">,</span><span class="w">
				</span><span class="s2">"dynamdb:GetItem"</span><span class="w">
			</span><span class="p">],</span><span class="w">
			</span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:dynamodb:us-east-1:398447858632:table/Transactions"</span><span class="w">
		</span><span class="p">}</span><span class="w">
	</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[Identity Access Management is a policy tool used to control access to resources created in AWS. Resources include s3 buckets, lambdas, databases, containers, and other services. Human and application users need allow and deny permissions to perform actions on resources. Permissions are defined in an IAM policy document and attached to a user, group, or role. Notes below cover IAM basics.]]></summary></entry><entry><title type="html">Freedom Of Information Act</title><link href="http://localhost:4000/2023/04/19/freedom-of-information-act.html" rel="alternate" type="text/html" title="Freedom Of Information Act" /><published>2023-04-19T00:00:00-05:00</published><updated>2023-04-19T00:00:00-05:00</updated><id>http://localhost:4000/2023/04/19/freedom-of-information-act</id><content type="html" xml:base="http://localhost:4000/2023/04/19/freedom-of-information-act.html"><![CDATA[<p>The Freedom of Information Act (FOIA) is a federal law designed to facilitate transparancy in government. It was enacted in the 1960s under President Lyndon B Johnson and focuses on executive branch federal agencies. The FOIA requires the proactive posting of information and the timely release of information when requested. The FOIA also makes distinctions between public and protected records. Notes below cover FOIA basics.</p>

<p><a href="https://www.foia.gov/">Central FOIA website</a></p>

<p>Who can make a FOIA request</p>
<ul>
  <li>anyone except
    <ul>
      <li>figutives</li>
      <li>foreign governments</li>
    </ul>
  </li>
  <li>request
    <ul>
      <li>be in writing</li>
      <li>describe records</li>
      <li>comply with agency law/regulation</li>
      <li>no justification</li>
    </ul>
  </li>
  <li>federal agencies are not people
    <ul>
      <li>can’t make FOIA requests</li>
    </ul>
  </li>
</ul>

<p>Records subject to FOIA</p>
<ul>
  <li>any record
    <ul>
      <li>created</li>
      <li>obtained</li>
    </ul>
  </li>
  <li>under control of agency
    <ul>
      <li>at time of request</li>
    </ul>
  </li>
  <li>distinct from
    <ul>
      <li>personal employee records</li>
      <li>congressional records</li>
    </ul>
  </li>
</ul>

<p>Time limit for FOIA</p>
<ul>
  <li>20 working day request response</li>
  <li>legally defined unusual circumstances
    <ul>
      <li>10 + 20 days</li>
    </ul>
  </li>
  <li>expedited processing by request</li>
  <li>agencies have individual regulations</li>
</ul>

<p>FOIA is primary means to access government information
	- prompt response is important</p>

<p>Searching for responsive records</p>
<ul>
  <li>conduct search with FOIA professionals</li>
  <li>cooperate with search responses</li>
  <li>need clear understanding of request</li>
  <li>best effort search to uncover records
    <ul>
      <li>responsive records</li>
      <li>paper and electronic</li>
      <li>email, phone, fac</li>
    </ul>
  </li>
</ul>

<p>Conducting a search</p>
<ul>
  <li>search has a detailed FOIA definition</li>
  <li>search keywords defined in request</li>
  <li>document search
    <ul>
      <li>search terms and date ranges</li>
      <li>staff consulted</li>
      <li>time dedicated to search</li>
      <li>locations searched</li>
      <li>records found</li>
      <li>used to review request</li>
    </ul>
  </li>
  <li>the document search from FOIA
    <ul>
      <li>needs to be archived</li>
      <li>can be requested in FOIA</li>
    </ul>
  </li>
</ul>

<p>Document review by FOIA officials</p>
<ul>
  <li>check for protected records</li>
  <li>9 categories of protected info</li>
  <li>officials decide on disclosure of records</li>
  <li>exemptions
    <ul>
      <li>national security info</li>
      <li>internal HR info</li>
      <li>info protected by law</li>
      <li>trade secretes and commercial info</li>
      <li>records protected by civil privileges</li>
      <li>info that will invade personal privacy</li>
      <li>law enforcement and judiciary info</li>
      <li>financial institution info</li>
      <li>geological info</li>
    </ul>
  </li>
</ul>

<p>Proactively disclosing records</p>
<ul>
  <li>policy documents</li>
  <li>manuals and instructions</li>
  <li>agency orders and legal outcomes</li>
  <li>records released by prior FOIA</li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[The Freedom of Information Act (FOIA) is a federal law designed to facilitate transparancy in government. It was enacted in the 1960s under President Lyndon B Johnson and focuses on executive branch federal agencies. The FOIA requires the proactive posting of information and the timely release of information when requested. The FOIA also makes distinctions between public and protected records. Notes below cover FOIA basics.]]></summary></entry><entry><title type="html">Core Bash Commands</title><link href="http://localhost:4000/2023/03/29/core-bash-commands.html" rel="alternate" type="text/html" title="Core Bash Commands" /><published>2023-03-29T00:00:00-05:00</published><updated>2023-03-29T00:00:00-05:00</updated><id>http://localhost:4000/2023/03/29/core-bash-commands</id><content type="html" xml:base="http://localhost:4000/2023/03/29/core-bash-commands.html"><![CDATA[<p>The bash terminal is a central part of my workflow. It is time for some obligatory notes on what I would define as the <em>“core built in commands”</em>. These commands have been drawn from my shell history based on frequency and binned into the following categories:</p>

<ul>
  <li>Getting help</li>
  <li>Interacting with directories</li>
  <li>Intereacting with files</li>
  <li>Finding and searching</li>
  <li>Permissions and execution</li>
  <li>System and processes</li>
</ul>

<h2 id="getting-help">Getting help</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>man     # manual help about a command
apropos # search manual for help
</code></pre></div></div>

<h2 id="interacting-with-directories">Interacting with directories</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pwd      # print working directory
ls:      # list files in current directory 
ls -alF  # list files in long format
cd       # change directory
cd ..    # move up one directory
pushd    # push directory
popd     # pop directory
mkdir    # make a directory
mkdir -p # make a directory and parents
rmdir    # remove an empty directory
rmdir -p # remove empty directory and parents
</code></pre></div></div>

<h2 id="interacting-with-files">Interacting with files</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cp             # copy a file or directory
rm             # remove a file
rm -rf         # recursively remove files and directories
mv             # move a file or directory
less           # page through a file
cat            # print whole file
zip -r &lt;dir&gt;   # zip a directory of files
unzip &lt;.zip&gt;   # unzip files into current directory
gzip -kr &lt;dir&gt; # gzip a directory of files
gunzip &lt;.gz&gt;   # unzip into current directory
curl -O &lt;url&gt;  # download a file from URL and save as root
</code></pre></div></div>
<h2 id="finding-and-searching">Finding and searching</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>history                  # print terminal command history
grep &lt;str&gt; &lt;files&gt;       # search files for text
find &lt;dir&gt; -name &lt;file&gt;  # search directory for file
</code></pre></div></div>

<h2 id="environment-and-arguements">Environment and arguements</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>env    # look at environment variables
export # set a new environment variable
echo   # print arguements
xargs  # execute arguements:
</code></pre></div></div>

<h2 id="permissions-and-execution">Permissions and execution</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo             # super user do
source &lt;file&gt;    # execute commands from file in current shell 
chmod 644 &lt;file&gt; # change file permissions to read only
chmod 755 &lt;file&gt; # change file permissions to executable
chomd u+x &lt;file&gt; # make file executable for user
chomd a-x &lt;file&gt; # remove file executable for user
</code></pre></div></div>

<h2 id="system-and-processes">System and processes</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>exit           # exit shell
df             # print free disk space
du             # print directory disk usage
top            # print system usage and processes
ps aux         # list all running process with ID
kill -9 &lt;id&gt;   # kill process with ID
apt update     # download updates for all installed packages
apt upgrade    # install updates for all installed packages
apt list       # list available packages
apt install    # install package
apt remove     # uninstall package
apt purge      # uninstall package and configuration
apt autoremove # uninstall unused dependancies
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[The bash terminal is a central part of my workflow. It is time for some obligatory notes on what I would define as the “core built in commands”. These commands have been drawn from my shell history based on frequency and binned into the following categories:]]></summary></entry><entry><title type="html">Notes On Half Guard</title><link href="http://localhost:4000/2023/02/15/notes-on-half-guard.html" rel="alternate" type="text/html" title="Notes On Half Guard" /><published>2023-02-15T00:00:00-06:00</published><updated>2023-02-15T00:00:00-06:00</updated><id>http://localhost:4000/2023/02/15/notes-on-half-guard</id><content type="html" xml:base="http://localhost:4000/2023/02/15/notes-on-half-guard.html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Half_guard">Half guard</a> is a common Jiu Jitsu position with a top combatant lying on top of the bottom combatant with one leg entangled. Half guard can be found when one combatant is attempting to escape a hold and recover guard. Half guard can also be found when transitioning from other guards.</p>

<p>Depending on grips and body position half guard can favor either the top or bottom combatant. This leads to a wide range of passes, sweeps, and submissions that can be executed by either player. Due to the range of entries and advantages held by both combatants half guard is an important position to understand.</p>

<p>Below is a brief set of notes comipled from an excellent <a href="https://youtu.be/E8x1Cva8hJ8">half guard primer</a> by John Danaher and Bernardo Faria. The notes follow a loose format and serve to:</p>

<ol>
  <li>Contrast top and bottom half guard mechanics</li>
  <li>Define a basic strategy for half guard bottom</li>
</ol>

<h2 id="half-guard-mechanics">Half Guard Mechanics</h2>

<ul>
  <li>Half guard top is a passing position</li>
  <li>Half guard bottom is a sweeping position</li>
  <li>High level of body contact between combatants
    <ul>
      <li>slows down speed of engagement</li>
      <li>encourages controlled movements</li>
    </ul>
  </li>
  <li>Half guard top can pin bottom
    <ul>
      <li>cross face wedge</li>
      <li>head and shoulder control</li>
    </ul>
  </li>
  <li>Head and shoulder control decides advantage
    <ul>
      <li>if top can pin bottom they can pass</li>
      <li>if bottom can deny pin they can sweep</li>
    </ul>
  </li>
</ul>

<h2 id="deny-control-in-half-guard-bottom">Deny Control in Half Guard Bottom</h2>

<ul>
  <li>Legs can only pull
    <ul>
      <li>harder to control distance</li>
      <li>serve as a shield</li>
    </ul>
  </li>
  <li>Arms have to stay engaged
    <ul>
      <li>fight for hooks</li>
      <li>frame for distance</li>
      <li>defend from attacks</li>
    </ul>
  </li>
</ul>

<ol>
  <li>Knee shields frame and maintain distance
    <ul>
      <li>low hip knee shield</li>
      <li>high shoulder knee shield</li>
    </ul>
  </li>
  <li>Outer arm
    <ul>
      <li>underhook
        <ul>
          <li>block cross face wedge and pin</li>
        </ul>
      </li>
      <li>over hook
        <ul>
          <li>block cross face wedge and pin</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Inner arm hand control
    <ul>
      <li>take away post and pin</li>
    </ul>
  </li>
</ol>

<p>The knee shield, outer arm hook, and inner arm hand control are the three key requirements for denying head and shoulder control. Maintaining all three requirements are critical for holding bottom advantage and finding a strong sweep against the top combatant. Lack of control in any combonation of requirements will lead to a pin and strong pass by the top combatant.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Half guard is a common Jiu Jitsu position with a top combatant lying on top of the bottom combatant with one leg entangled. Half guard can be found when one combatant is attempting to escape a hold and recover guard. Half guard can also be found when transitioning from other guards.]]></summary></entry><entry><title type="html">Notes On Side Control</title><link href="http://localhost:4000/2023/01/15/notes-on-side-control.html" rel="alternate" type="text/html" title="Notes On Side Control" /><published>2023-01-15T00:00:00-06:00</published><updated>2023-01-15T00:00:00-06:00</updated><id>http://localhost:4000/2023/01/15/notes-on-side-control</id><content type="html" xml:base="http://localhost:4000/2023/01/15/notes-on-side-control.html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Side_control">Side control</a> is a strong pin and fundamental Jiu Jitsu position. The top combatant holds the dominant position and can generate intense pressure, hunt for submissions, or transition to other positions. The bottom combatant has to defend from attacks and overcome weight and friction to recover guard and stay in the fight. Getting caught in bottom side control as a white belt is a common and brutal experence. A basic understanding of the position mechanics is required to survive.</p>

<p>Below are a set of notes compiled from an excellent <a href="https://youtu.be/cuXq-k__9lQ">side control primer</a> by John Danaher and Bernardo Faria. The notes follow a loose format and serve to:</p>

<ol>
  <li>Solidify a conceptual understanding of side control</li>
  <li>Define a basic approach for escaping side control</li>
</ol>

<h2 id="side-control-concepts">Side Control Concepts</h2>

<ul>
  <li>Side control is a stable pin due to perpindicular
    <ul>
      <li>Spine angle</li>
      <li>Body position</li>
    </ul>
  </li>
  <li>Many holds for stabilizing a side control pin
    <ul>
      <li>Knee to hip</li>
      <li>Back under hook</li>
      <li>Cross face</li>
      <li><a href="https://en.wikipedia.org/wiki/Kesa-gatame">Kesa-gatame</a></li>
    </ul>
  </li>
  <li>Components of side control pin
    <ul>
      <li>Use of limbs as wedges (primary)</li>
      <li>Use of body weight (secondary)</li>
    </ul>
  </li>
</ul>

<p>The wedging of limbs against the bottom combantant is the basis of the side control pin. It creates inside control and inhibits movement. Body weight on its own cannot be used to maintain the pin. However, body weight can significantly reinforce wedges and create crushing pressure.</p>

<h2 id="when-pinned-in-side-control">When Pinned in Side Control</h2>

<ul>
  <li>Goal for escape and recovery
    <ul>
      <li>Get inside opponent’s wedges</li>
      <li>Defend arms and neck from submission</li>
      <li>Block transition to mount or knee on belly</li>
    </ul>
  </li>
  <li>Put knee in hip pocket
    <ul>
      <li>Defend and block</li>
    </ul>
  </li>
  <li>Get near side elbow frame
    <ul>
      <li>Defend and block</li>
    </ul>
  </li>
  <li>Shrimp outward and work knee into hip pocket
    <ul>
      <li>Keep foot pointed and above hip</li>
    </ul>
  </li>
  <li>Elbow and knee join to from a strong “V” frame
    <ul>
      <li>Defend and block</li>
    </ul>
  </li>
  <li>Join foot on inside foot and drive away with legs
    <ul>
      <li>Break open pin and create distance</li>
    </ul>
  </li>
  <li>Fight to get head and hand inside crossface bicep
    <ul>
      <li>Defend and block</li>
    </ul>
  </li>
  <li>Shift hips and knee under opponent
    <ul>
      <li>Spines are now aligned</li>
      <li>Control is diminished</li>
    </ul>
  </li>
  <li>Search for grips, hooks, and recover guard
    <ul>
      <li>Closed, half, or butterfly guard</li>
      <li>Collar and sleeve</li>
      <li>Under and over hooks</li>
    </ul>
  </li>
</ul>

<p>This sequence draws from the fundamental “knee elbow escape” series. The idea of connecting the inside knee with indside elbow to block the opponent and create distance can be applied to other forms of escape and guard recoveries. However, if an opponent successfully sets a strong side control pin it will take a combonation of technique, strength, and grit to overcome crushing forces and friction.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Side control is a strong pin and fundamental Jiu Jitsu position. The top combatant holds the dominant position and can generate intense pressure, hunt for submissions, or transition to other positions. The bottom combatant has to defend from attacks and overcome weight and friction to recover guard and stay in the fight. Getting caught in bottom side control as a white belt is a common and brutal experence. A basic understanding of the position mechanics is required to survive.]]></summary></entry><entry><title type="html">Python Linting Tools</title><link href="http://localhost:4000/2022/12/15/python-linting-tools.html" rel="alternate" type="text/html" title="Python Linting Tools" /><published>2022-12-15T00:00:00-06:00</published><updated>2022-12-15T00:00:00-06:00</updated><id>http://localhost:4000/2022/12/15/python-linting-tools</id><content type="html" xml:base="http://localhost:4000/2022/12/15/python-linting-tools.html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Lint_(software)">Linting</a> is the process of analyzing code for syntax, structure, and style errors. Linting is a form of <a href="https://en.wikipedia.org/wiki/Static_program_analysis">static code analysis</a> that occurs prior to code exuction at the program level. In practice linting can occur while code is edited, saved, or evaluated in a development workflow. The goal of linting is to minimize runtime errors and ensure code quality. Linters can be ran in a terminal and often integrate with text editors and IDEs.</p>

<p>In Python linting standards are documented in the <a href="">PEP8 style guide</a> and implemented by an ecosystem of linting tools. Each tool has an opinionated interpretation of the standards and serves a specific role in the linting process. Understanding what each tool does and its relationship to other tools can be challenging.</p>

<p>The purpose of this post is to provide a short reference for a set of common Python linters. These pointers will highlight intended usage, frame dependancies, and give a link to project documentation. Many of these tools appear to do the same things.</p>

<h2 id="linting-tools">Linting Tools</h2>

<p><a href="https://pypi.org/project/autopep8/">autopep8</a></p>

<ul>
  <li>linter and automatic Python code formatter</li>
  <li>direct implementation of PEP8</li>
  <li>built on top <code class="language-plaintext highlighter-rouge">pycodestyle</code></li>
  <li>runs from command line</li>
  <li>integrates with text editor</li>
</ul>

<p><a href="https://pypi.org/project/black/">black</a></p>

<ul>
  <li>linter and automatic Python code formatter</li>
  <li>strict implementation of PEP8</li>
  <li>limited configuration options by design</li>
  <li>runs from command line</li>
  <li>integrates with text editor</li>
</ul>

<p><a href="https://pypi.org/project/flake8/">flake8</a></p>

<ul>
  <li>pure linting tool with static error codes</li>
  <li>direct impelmentation of PEP8</li>
  <li>integrates <code class="language-plaintext highlighter-rouge">pyflakes</code>, <code class="language-plaintext highlighter-rouge">pycodestyle</code>, and <code class="language-plaintext highlighter-rouge">mccabe</code></li>
  <li>runs from command line</li>
  <li>integrates with text editor</li>
</ul>

<p><a href="https://pypi.org/project/mccabe/">mccabe</a></p>

<ul>
  <li>module that serves as a plugin for other linters</li>
  <li>computes and returns a graph of <a href="https://en.wikipedia.org/wiki/Cyclomatic_complexity">code complexity</a></li>
  <li>returned a graph represents paths in code</li>
  <li>paths are used by linters to evaluate code</li>
  <li>runs from command line</li>
</ul>

<p><a href="https://pypi.org/project/pycodestyle/">pycodestyle</a></p>

<ul>
  <li>pure linting tool with static error codes</li>
  <li>direct implementation of PEP8</li>
  <li>one of the original Python linters</li>
  <li>often used by other linters</li>
  <li>runs from command line</li>
</ul>

<p><a href="https://pypi.org/project/pydocstyle/">pydocstyle</a></p>

<ul>
  <li>pure linting tool with a focus on docstrings</li>
  <li>direct implementation of <a href="https://peps.python.org/pep-0257/">PEP257</a></li>
  <li>PEP257 provides guidance on doc string formatting</li>
  <li>often paired with <code class="language-plaintext highlighter-rouge">pycodestyle</code></li>
  <li>runs from commman line</li>
</ul>

<p><a href="https://pypi.org/project/pyflakes/">pyflakes</a></p>

<ul>
  <li>simple linting tool that focuses on static errors</li>
  <li>limited implementation of PEP8</li>
  <li>does not check style convention, only errors</li>
  <li>often used by other linters</li>
  <li>runs from command line</li>
</ul>

<p><a href="https://pypi.org/project/pylint/">pylint</a></p>

<ul>
  <li>complex linting tool with many features</li>
  <li>direct implementation of PEP8 with configuration options</li>
  <li>provides static errors, style errors, and refactoring suggestions</li>
  <li>can be extended with plugins for specific frameworks</li>
  <li>runs from command line and integrates with text editor</li>
</ul>

<p><a href="https://pypi.org/project/yapf/">yapf</a></p>

<ul>
  <li>automatic Python formatter</li>
  <li>configurable implementation of PEP8</li>
  <li>intended to format code to project defined style</li>
  <li>newer project that is still in alpha</li>
  <li>runs from command line</li>
</ul>]]></content><author><name></name></author><summary type="html"><![CDATA[Linting is the process of analyzing code for syntax, structure, and style errors. Linting is a form of static code analysis that occurs prior to code exuction at the program level. In practice linting can occur while code is edited, saved, or evaluated in a development workflow. The goal of linting is to minimize runtime errors and ensure code quality. Linters can be ran in a terminal and often integrate with text editors and IDEs.]]></summary></entry><entry><title type="html">The Lego Themes Table</title><link href="http://localhost:4000/2022/11/14/the-lego-themes-table.html" rel="alternate" type="text/html" title="The Lego Themes Table" /><published>2022-11-14T00:00:00-06:00</published><updated>2022-11-14T00:00:00-06:00</updated><id>http://localhost:4000/2022/11/14/the-lego-themes-table</id><content type="html" xml:base="http://localhost:4000/2022/11/14/the-lego-themes-table.html"><![CDATA[<p>In this post we will bulk load 458 unique lego themes from the Rebrickable API into a local lego database. This task leverages the API and database operations established in the <a href="https://rckwzrd.github.io/2022/09/26/counting-lego-bricks.html">Counting Lego Bricks</a> and <a href="https://rckwzrd.github.io/2022/10/26/creating-a-lego-database.html">Creating a Lego Database</a> posts. Because we already wrote functions for requesting data and interacting with the database hydrating the themes table is a straightforward operation.</p>

<p>For context lets quickly review the schema for themes table in the lego database:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>sqlite3 lego.db 
SQLite version 3.37.2 2022-01-06 13:25:41
...
sqlite&gt; .schema
CREATE TABLE themes <span class="o">(</span>
            theme_id INT PRIMARY KEY,
            theme_name TEXT NOT NULL
        <span class="o">)</span><span class="p">;</span>
</code></pre></div></div>

<p>The themes table has been provisioned to accept a <code class="language-plaintext highlighter-rouge">theme_id</code> integer as a primary key and a <code class="language-plaintext highlighter-rouge">theme_name</code> as a non-null text object. These are the two pieces of data that will be collected from the Rebrickable API and dropped into this table for permanent retention.</p>

<p>The procedure below requires minimal new code to execute the bulk load:</p>

<ol>
  <li>Define a bulk load python function and SQL statement</li>
  <li>Request theme data and format for insertion</li>
  <li>Wrap the procedure in a python function and execute</li>
  <li>Verify the themes table was successfully hydrated</li>
</ol>

<h2 id="function-and-statement">Function and Statement</h2>

<p>The bulk load function follows patterns established for interacting with the lego database in <code class="language-plaintext highlighter-rouge">lego_db.py</code> from the <a href="https://rckwzrd.github.io/2022/10/26/creating-a-lego-database.html">lego database post</a>. The only additional components are the <code class="language-plaintext highlighter-rouge">with conn</code> context manager and the <code class="language-plaintext highlighter-rouge">conn.executemany()</code> method:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># lego_db.py
</span><span class="k">def</span> <span class="nf">load_table</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">load_sql</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">conn</span><span class="p">:</span>
            <span class="n">conn</span><span class="p">.</span><span class="n">executemany</span><span class="p">(</span><span class="n">load_sql</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"Table Hydrated"</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">sqlite3</span><span class="p">.</span><span class="n">Error</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">raise</span> <span class="n">e</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">conn.executemany()</code> method accepts a SQL insert statement string and a blob of data as arguements. This method can be used to load blobs of data in one call making it a good fit for the bulk load use case. One caveat is that the data passed needs to be a list of tuples. This requirement will be handled after the themes data is requested.</p>

<p>The <code class="language-plaintext highlighter-rouge">with conn</code> context manager wraps the <code class="language-plaintext highlighter-rouge">conn.executemany()</code> call and commits the insert transactions taking place. If any sort of exception is thrown the context manager will roll back the transactions and protect the database. More information on the context manager can be found in the <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3-connection-context-manager">context manager documentation</a></p>

<p>The SQL statement used to execute the bulk load is deceptively simple:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load_sql</span> <span class="o">=</span> <span class="s">"""
    INSERT INTO themes VALUES(?, ?)
"""</span>
</code></pre></div></div>
<p>Loading data into a the themes table is triggered by the <code class="language-plaintext highlighter-rouge">INSERT INTO themes</code> statement. The key piece is the <code class="language-plaintext highlighter-rouge">VALUES</code> statement. The <code class="language-plaintext highlighter-rouge">?, ?</code> expression is SQL placeholder syntax that will insert a tuple of <code class="language-plaintext highlighter-rouge">theme_id</code> and <code class="language-plaintext highlighter-rouge">theme_name</code> into the themes table. The placeholder syntax is an important tool for loading data and enforcing security. Additional details can be found in the <a href="https://docs.python.org/3/library/sqlite3.html#sqlite3-placeholders">placeholder documentation</a>.</p>

<h2 id="request-and-format">Request and Format</h2>

<p>Now that there is a method for loading the themes table we can switch gears and work on requesting the 458 unique lego theme records. Fortunately we dervied an approach for aqcuiring the data in the <a href="https://rckwzrd.github.io/2022/09/26/counting-lego-bricks.html">counting lego bricks </a> post. Assuming the directory structure is correct, we can simply import the <code class="language-plaintext highlighter-rouge">get_themes()</code> function from the <code class="language-plaintext highlighter-rouge">lego_api.py</code> module and call it in the pipeline:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># lego_api.py
</span><span class="k">def</span> <span class="nf">get_themes</span><span class="p">():</span>
    <span class="n">url</span> <span class="o">=</span> <span class="s">"https://rebrickable.com/api/v3/lego/themes/?page=1&amp;page_size=1000"</span>
    <span class="n">req</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">)</span>
    <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">1.1</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">req</span><span class="p">.</span><span class="n">json</span><span class="p">()[</span><span class="s">"results"</span><span class="p">]</span>
</code></pre></div></div>

<p>The single caveat is that the <code class="language-plaintext highlighter-rouge">load_table()</code> function is expecting a list of tuples. The blob of theme records returned from <code class="language-plaintext highlighter-rouge">get_themes()</code> can be reshaped into the required data structure with the following list comprehension:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">themes</span> <span class="o">=</span> <span class="p">[(</span><span class="n">i</span><span class="p">[</span><span class="s">"id"</span><span class="p">],</span> <span class="n">i</span><span class="p">[</span><span class="s">"name"</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">get_themes</span><span class="p">()]</span>
</code></pre></div></div>
<p>It is critical to note how fast this section came together when pre-existing code was leveraged to request bulk theme data. Writing generalizable functions takes skill, but it pays dividends in situations like this.</p>

<h2 id="wrap-and-execute">Wrap and Execute</h2>

<p>At this point all of the machinery needed to bulk load the themes table is in place. We just need to orchestrate the operation. To do this we will wrap each step in a function called <code class="language-plaintext highlighter-rouge">load_themes_table()</code> and then call it directly:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># lego_db.py
</span><span class="k">def</span> <span class="nf">load_theme_table</span><span class="p">():</span>

    <span class="n">themes</span> <span class="o">=</span> <span class="p">[(</span><span class="n">i</span><span class="p">[</span><span class="s">"id"</span><span class="p">],</span> <span class="n">i</span><span class="p">[</span><span class="s">"name"</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">get_themes</span><span class="p">()]</span>

    <span class="n">load_sql</span> <span class="o">=</span> <span class="s">"""
        INSERT INTO themes VALUES(?, ?)
    """</span>

    <span class="n">db_file</span> <span class="o">=</span> <span class="s">"lego.db"</span>
    <span class="n">conn</span> <span class="o">=</span> <span class="n">connect_db</span><span class="p">(</span><span class="n">db_file</span><span class="p">)</span>
    <span class="n">load_table</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">load_sql</span><span class="p">,</span> <span class="n">themes</span><span class="p">)</span>
    <span class="n">close_db</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Themes table hydrated"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">load_theme_table</span><span class="p">()</span>
</code></pre></div></div>

<p>This wrapper function requests the full blob of theme records, converts the data, connects to the lego database, loads the records with a SQL statement, and closes the connection. Using the <code class="language-plaintext highlighter-rouge">if __name__</code> idiom the wrapper can be executed as a script from the command line:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>python3 src/lego_db.py
</code></pre></div></div>

<h2 id="verify-data">Verify Data</h2>

<p>After executing the bulk load we can quickly verify that records filled up the themes table using the SQLite3 terminal interface:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>sqlite3 lego.db 
SQLite version 3.37.2 2022-01-06 13:25:41
...
sqlite&gt; <span class="k">select </span>count<span class="o">(</span><span class="k">*</span><span class="o">)</span> from themes<span class="p">;</span>
459
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>sqlite lego.db
SQLite version 3.37.2 2022-01-06 13:25:41
...
sqlite&gt; <span class="k">select</span> <span class="k">*</span> from themes limit 5<span class="p">;</span>
1|Technic
3|Competition
4|Expert Builder
16|RoboRiders
17|Speed Slammers
</code></pre></div></div>

<p>The data is place and the pipeline is succussful! Now that the themes table is hydrated we can start thinking about individual set records, but this a task for another time. Hopefully this demonstrates how code grows over time and hints at the ways that SQL, Python, and APIs can be used to build persistent datastores.</p>

<h2 id="full-script">Full Script</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sqlite3</span>
<span class="kn">from</span> <span class="nn">lego_api</span> <span class="kn">import</span> <span class="n">get_themes</span>

<span class="c1">### other functions from lego_db.py
### ... 
### ...
</span>
<span class="k">def</span> <span class="nf">load_table</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">load_sql</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="c1">#NOTE: context manager
</span>        <span class="k">with</span> <span class="n">conn</span><span class="p">:</span>
            <span class="n">conn</span><span class="p">.</span><span class="n">executemany</span><span class="p">(</span><span class="n">load_sql</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"Table Hydrated"</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">sqlite3</span><span class="p">.</span><span class="n">Error</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">raise</span> <span class="n">e</span>

<span class="k">def</span> <span class="nf">load_theme_table</span><span class="p">():</span>
    <span class="n">themes</span> <span class="o">=</span> <span class="p">[(</span><span class="n">i</span><span class="p">[</span><span class="s">"id"</span><span class="p">],</span> <span class="n">i</span><span class="p">[</span><span class="s">"name"</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">get_themes</span><span class="p">()]</span>

    <span class="n">load_sql</span> <span class="o">=</span> <span class="s">"""
        INSERT INTO themes VALUES(?, ?)
    """</span>

    <span class="n">db_file</span> <span class="o">=</span> <span class="s">"lego.db"</span>
    <span class="n">conn</span> <span class="o">=</span> <span class="n">connect_db</span><span class="p">(</span><span class="n">db_file</span><span class="p">)</span>
    <span class="n">load_table</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="n">load_sql</span><span class="p">,</span> <span class="n">themes</span><span class="p">)</span>
    <span class="n">close_db</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">load_theme_table</span><span class="p">()</span>
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[In this post we will bulk load 458 unique lego themes from the Rebrickable API into a local lego database. This task leverages the API and database operations established in the Counting Lego Bricks and Creating a Lego Database posts. Because we already wrote functions for requesting data and interacting with the database hydrating the themes table is a straightforward operation.]]></summary></entry></feed>